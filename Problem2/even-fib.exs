# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# so make fib sequence, check it's under a max value, check it's even, and sum it.



defmodule EnumFib do

  def sum_even_terms(max_val) do
    [sum] = 
      Stream.unfold({0, 1, 0}, fn
        {f1, _f2, _sum} when f1 >= max_val -> nil
        {f1, f2, sum} when rem(f1, 2) == 0 -> {f1+sum, {f2, f1+f2, f1+sum}}
        {f1, f2, sum} -> {sum, {f2, f1+f2, sum}}
      end)
      |> Enum.take(-1)
    sum
  end

end

IO.inspect EnumFib.sum_even_terms(4_000_000)
    
